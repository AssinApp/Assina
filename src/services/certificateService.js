import { API_SIGNATURE_BASE_URL } from "@env";
import AsyncStorage from "@react-native-async-storage/async-storage";
import axios from "axios";

/**
 * Decodifica um JWT para extrair informa√ß√µes do payload.
 */
export const decodeJwtToken = (token) => {
    try {
      const base64Url = token.split(".")[1]; // Pegamos apenas o payload
      const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
      const decodedData = JSON.parse(atob(base64)); // Converte de Base64 para JSON
  
      console.log("üîç Payload do token decodificado:", decodedData);
  
      // Verificar qual chave cont√©m o ID do usu√°rio
      const userId =
        decodedData.id || decodedData.user_id || decodedData.uid || decodedData.sub;
      if (!userId) {
        console.error("‚ùå Erro: ID do usu√°rio n√£o encontrado no token. Payload:", decodedData);
        return null;
      }
  
      // Se n√£o houver nome, tenta inferir a partir do campo 'sub' (supondo que seja um email)
      if (!decodedData.name && decodedData.sub && decodedData.sub.includes("@")) {
        const inferredName = decodedData.sub.split("@")[0];
        decodedData.name = inferredName.charAt(0).toUpperCase() + inferredName.slice(1);
      }
  
      return { ...decodedData, id: userId }; // Retorna com o ID padronizado
    } catch (error) {
      console.error("‚ùå Erro ao decodificar token JWT:", error);
      return null;
    }
  };


/**
 * Obt√©m o token do AsyncStorage ou solicita um novo via API.
 */
export const fetchToken = async (username, password) => {
    try {
      const formBody = `username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`;
  
      const response = await fetch(`${API_SIGNATURE_BASE_URL}/token/`, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          Accept: "application/json",
        },
        body: formBody,
      });
  
      if (!response.ok) {
        const errorMessage = await response.text();
        console.error("‚ùå Erro ao buscar token:", errorMessage);
        return null;
      }
  
      const data = await response.json();
      const token = data.access_token;
  
      if (token) {
        console.log("‚úÖ Novo token obtido:", token);
  
        // Salva o token no AsyncStorage
        await AsyncStorage.setItem("token", token);
  
        // Decodifica o token para obter ID e (se dispon√≠vel) nome do usu√°rio
        const decoded = decodeJwtToken(token);
        if (decoded && decoded.id) {
          console.log(`üîë ID do usu√°rio extra√≠do do token: ${decoded.id}`);
          await AsyncStorage.setItem("user_id", decoded.id.toString());
          // Armazena o nome somente se estiver dispon√≠vel
          if (decoded.name) {
            await AsyncStorage.setItem("user_name", decoded.name);
          }
        }
  
        return token;
      } else {
        console.error("‚ùå Nenhum token retornado pela API.");
        return null;
      }
    } catch (error) {
      console.error("‚ùå Erro ao obter token:", error.message);
      return null;
    }
};

/**
 * Obt√©m o ID e Nome do usu√°rio do AsyncStorage
 */
export const fetchUserInfo = async () => {
    try {
      const token = await AsyncStorage.getItem("token");
  
      if (!token) {
        console.warn("‚ùå Nenhum token encontrado.");
        return null;
      }
  
      // Verifica se j√° h√° informa√ß√µes armazenadas no AsyncStorage
      const userId = await AsyncStorage.getItem("user_id");
      const userName = await AsyncStorage.getItem("user_name");
  
      if (userId && userName) {
        console.log(`‚úÖ [CACHE] Usu√°rio encontrado no AsyncStorage: ID=${userId}, Nome=${userName}`);
        return { id: userId, cn: userName };
      }
  
      console.log("üìå Buscando informa√ß√µes do usu√°rio na API...");
  
      // Aten√ß√£o: URL corrigida para incluir '/api' conforme os endpoints utilizados
      const response = await fetch(`${API_SIGNATURE_BASE_URL}/api/users/me`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          Accept: "application/json",
        },
      });
  
      if (!response.ok) {
        console.error("‚ùå Erro ao buscar usu√°rio na API:", await response.text());
        return null;
      }
  
      const data = await response.json();
      console.log(`‚úÖ Usu√°rio encontrado na API: ID=${data.id}, Nome=${data.name}`);
  
      // Armazena as informa√ß√µes para futuras chamadas
      await AsyncStorage.setItem("user_id", data.id.toString());
      await AsyncStorage.setItem("user_name", data.name);
  
      return { id: data.id, cn: data.name };
    } catch (error) {
      console.error("‚ùå Erro ao obter informa√ß√µes do usu√°rio:", error);
  
      // **FALLBACK:** Tenta usar os dados armazenados
      const userId = await AsyncStorage.getItem("user_id");
      const userName = await AsyncStorage.getItem("user_name");
  
      if (userId && userName) {
        console.warn("‚ö†Ô∏è [FALLBACK] Usando dados armazenados no AsyncStorage.");
        return { id: userId, cn: userName };
      }
  
      return null;
    }
  };

/**
 * Gera um certificado autoassinado
 */
export const generateCertificate = async (userInfo = null) => {
    try {
        let token = await AsyncStorage.getItem("token");

        if (!token) {
            console.error("‚ùå Nenhum token armazenado.");
            return null;
        }

        // Se j√° temos userInfo, evitamos chamar a API novamente
        if (!userInfo) {
            console.log("üìå [INFO] Buscando informa√ß√µes do usu√°rio antes de gerar o certificado...");
            userInfo = await fetchUserInfo();
            if (!userInfo) {
                console.error("‚ùå [ERRO] N√£o foi poss√≠vel obter ID e Nome do usu√°rio.");
                return null;
            }
        }

        console.log(`üìú Enviando requisi√ß√£o para gerar certificado com ID=${userInfo.id}, Nome=${userInfo.cn}`);

        const requestBody = {
            id: userInfo.id,
            cn: userInfo.cn,
        };

        const response = await axios.post(
            `${API_SIGNATURE_BASE_URL}/api/certificates/generate-self-signed`,
            requestBody,
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            }
        );

        console.log("‚úÖ Certificado gerado com sucesso:", response.data);
        return response.data;
    } catch (error) {
        console.error("‚ùå Erro ao gerar certificado:", error.response?.data || error.message);
        return null;
    }
};

